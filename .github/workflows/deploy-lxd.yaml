name: Deploy LXD Infrastructure

on:
  push:
    branches:
      - main
      - dev
    paths:
      - "lxd-infra/**"
      - "ansible/**"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      # 테라폼 설치
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Terraform Cloud에 로그인하기 위한 설정
      - name: Configure Terraform Cloud credentials
        run: |
          cat > ~/.terraformrc <<EOF
          credentials "app.terraform.io" {
          token = "${{ secrets.TF_API_TOKEN_BANNOTE_SERVER }}"
          }
          EOF

      # LXD 상태 확인 (미리 설치 후 lxd 그룹에 추가 필요)
      - name: Check LXD availability
        run: |
          echo "Checking if LXD is available..."
          if ! command -v lxc &> /dev/null; then
            echo "❌ LXD command not found. Please install LXD."
            exit 1
          fi

          echo "Testing LXD access..."
          if ! lxc_output=$(lxc version 2>&1); then
            echo "❌ LXD is not accessible. See error below:"
            echo "$lxc_output"
            exit 1
          fi

          echo "✅ LXD is available."
          echo "$lxc_output"
          lxc list
        shell: bash

      - name: Set Terraform environment variables
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=main" >> $GITHUB_ENV
            echo "WORKSPACE_NAME=bannote-server-main" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
            echo "WORKSPACE_NAME=bannote-server-dev" >> $GITHUB_ENV
          else
            echo "Error: Deploy workflow must be run from 'main' or 'dev' branch."
            exit 1
          fi

      - name: Create inventory directory
        run: |
          mkdir -p ~/inventory
          echo "✅ Created inventory directory at ~/inventory"

      - name: Terraform Apply
        working-directory: ./lxd-infra
        env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_INPUT: false
          TF_CLI_ARGS: "-no-color"
        run: |
          echo "Using Terraform workspace: ${{ env.WORKSPACE_NAME }}"

          # Export TF_WORKSPACE to automatically select workspace during init
          export TF_WORKSPACE=${{ env.WORKSPACE_NAME }}

          terraform init
          terraform apply -auto-approve -var="environment=${{ env.ENV }}"

      - name: Show Terraform Outputs
        working-directory: ./lxd-infra
        env:
          TF_INPUT: false
        run: |
          echo "Getting outputs from workspace: ${{ env.WORKSPACE_NAME }}"
          export TF_WORKSPACE=${{ env.WORKSPACE_NAME }}

          terraform output instance_ips

      - name: Setup SSH key for Ansible
        run: |
          echo "Setting up SSH key for Ansible..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "✅ SSH key configured"

      - name: Verify Ansible inventory file
        run: |
          echo "Checking generated Ansible inventory file..."
          INVENTORY_PATH="$HOME/inventory/inventory-${{ env.ENV }}"
          echo "Looking for file at: $INVENTORY_PATH"

          if [ -f "$INVENTORY_PATH" ]; then
            echo "✅ Ansible inventory file created: inventory-${{ env.ENV }}"
            echo "Contents:"
            cat "$INVENTORY_PATH"
          else
            echo "❌ Ansible inventory file not found at $INVENTORY_PATH"
            echo "Contents of ~/inventory/:"
            ls -la ~/inventory/ || echo "Directory ~/inventory/ does not exist"
            exit 1
          fi

      - name: Test Ansible connectivity
        run: |
          echo "Testing Ansible connectivity to LXD instances..."
          INVENTORY_PATH="$HOME/inventory/inventory-${{ env.ENV }}"

          echo "Waiting for instances to be ready..."
          sleep 30

          echo "Testing SSH connectivity with Ansible ping..."
          ansible all -i "$INVENTORY_PATH" -m ping --timeout=30 || {
            echo "❌ Ansible ping failed. Trying individual hosts for debugging..."
            ansible all -i "$INVENTORY_PATH" -m ping --timeout=30 -vvv
            exit 1
          }

          echo "✅ All LXD instances are accessible via Ansible!"

      - name: Install Ansible requirements
        run: |
          echo "Installing Ansible collection requirements..."
          ansible-galaxy collection install kubernetes.core community.general --force

      - name: Run basic system info gathering
        run: |
          echo "Gathering system information from all hosts..."
          INVENTORY_PATH="$HOME/inventory/inventory-${{ env.ENV }}"

          ansible all -i "$INVENTORY_PATH" -m setup -a "filter=ansible_distribution*,ansible_memory_mb,ansible_processor_cores" | head -50

          echo "✅ System info gathering completed!"

      - name: Install k3s on LXD instances
        run: |
          echo "Installing k3s on all instances..."
          INVENTORY_PATH="$HOME/inventory/inventory-${{ env.ENV }}"

          cd ansible
          ansible-playbook -i "$INVENTORY_PATH" playbooks/install-k3s.yml

          echo "✅ k3s installation completed!"
